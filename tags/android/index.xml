<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Jerry Blog</title>
    <link>https://nightjerry.github.io/tags/android/</link>
    <description>Recent content in android on Jerry Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Apr 2021 09:26:00 +0800</lastBuildDate><atom:link href="https://nightjerry.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jetpack Compose 2 State</title>
      <link>https://nightjerry.github.io/posts/16169192653523/</link>
      <pubDate>Wed, 21 Apr 2021 09:26:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/16169192653523/</guid>
      <description>[TOC]
Compose 中的状态 应用中的状态是指可以随时间变化的任何值。 状态的概念是 Compose 的核心
@Composable fun HelloContent() { Column(modifier = Modifier.padding(16.dp)) { Text( text = &amp;#34;Hello!&amp;#34;, modifier = Modifier.padding(bottom = 8.dp), style = MaterialTheme.typography.h5 ) // 相当于 EditText  OutlinedTextField( value = &amp;#34;&amp;#34;, onValueChange = { }, // 相当于 hint 属性  label = { Text(&amp;#34;Name&amp;#34;) } ) } } 程序运行后，点击 OutlinedTextField 会弹出输入法，但输入内容不会显示到输入框中，TextField 不会自行更新，但会在其 value 参数更改时更新。这是因 Compose 中组合和重组的工作原理造成的。 onValueChange 函数没有实现更新操作 在函数外定义 text 变量，在以前开发中是可以这样操作的，代码如下；</description>
    </item>
    
    <item>
      <title>Jetpack Compose 1</title>
      <link>https://nightjerry.github.io/posts/jetpack-compose-1/</link>
      <pubDate>Tue, 20 Apr 2021 21:49:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/jetpack-compose-1/</guid>
      <description>[TOC]
Jetpack Compose 是用于构建原生界面的新款 Android 工具包。它可简化并加快 Android 上的界面开发。使用更少的代码、强大的工具和直观的 Kotlin API，快速让应用生动而精彩
需要 android studio canary 版本, 下载最新版本 android studio
创建 Compose 项目 创建 Demo File &amp;gt; New &amp;gt; New Project &amp;gt; Empty Compose Activity
app/build.gradle 内容如下
android { ... kotlinOptions { jvmTarget = &amp;#39;1.8&amp;#39; useIR = true } buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion &amp;#34;${compose_version}&amp;#34; } } dependencies { .</description>
    </item>
    
    <item>
      <title>Binder机制之messenger，aidl</title>
      <link>https://nightjerry.github.io/posts/2019-12-24-binder2/</link>
      <pubDate>Tue, 24 Dec 2019 10:55:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-12-24-binder2/</guid>
      <description>[TOC]
Messenger 轻量级的IPC方式，底层实现是aidl
通信范例(client sendMsg to server) 步骤：
 服务端进程；实现逻辑如下  //1.创建service  public class MessengerService extends Services { //2.创建处理消息的handler  private static class MessengerHandler extends Handler { @Override public void handleMessage(Message msg) { //处理消息  switch(msg.what) { case MSG_FROM_CLIENT: Log.e(&amp;#34;tag&amp;#34;,&amp;#34;receive msg:&amp;#34;=msg.getData().getString(&amp;#34;msg&amp;#34;)); break; default: break; } } } //3.根据Handler创建Messenger  private final Messenger mMessenger = new Messenger(new MessengerHandler()); //4.</description>
    </item>
    
    <item>
      <title>Binder机制</title>
      <link>https://nightjerry.github.io/posts/2019-12-20-binder/</link>
      <pubDate>Fri, 20 Dec 2019 09:28:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-12-20-binder/</guid>
      <description>[TOC]
IPC是Inter-Processs Communication的缩写，意为进程间通信. android启动多进程方式: 在AndroidManifest.xml中给Activity/Service/ContentProvider指定android:process属性
&amp;lt;activity android:name=&amp;#34;com.jerry.MainActivity&amp;#34; &amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&amp;#34;android.intent.action.MAIN&amp;#34;/&amp;gt; &amp;lt;category android:name=&amp;#34;android.intent.category.LAUNCHER&amp;#34;/&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;activity android:name=&amp;#34;com.jerry.SecondActivity&amp;#34; android:process=&amp;#34;:remote&amp;#34; /&amp;gt; &amp;lt;activity android:name=&amp;#34;com.jerry.ThridActivity&amp;#34; android:process=&amp;#34;com.jerry.remote&amp;#34; /&amp;gt; 以上增加了两个进程，如果包名为com.jerry，当启动SecondActivity时，系统创建一个单独的进程，进程名称为&amp;quot;com.jerry:remote&amp;quot;;当启动ThridActivity时，进程名为com.jerry.remote 在命令行通过adb shell ps | grep 包名查看进程信息 多进程会引入的问题：
 静态成员和单例模式完全失效； 线程同步机制失效； SharedPreferences 的可靠性下降； Application会多次创建;  Serializable serialVersionUID的作用: 序列化后的数据中的serialVersionUID只有和当前类的serialVersionUID相同才能正常被反序列化. 如果不手动指定serialVersionUID，反序列化时当前类有改动(增加或删除变量),系统会重新计算当前类的hash值并把它赋值给serialVersionUID，此时serialVersionUID与序列化数据中的serialVersionUID不同，导致反序列化失败.
Parcelable接口 一种序列化方式，对象实现此接口，可以通过Intent和Binder传递
public class User implements Parcelable { public int userId; public String userName; public boolean isMale; public Book book; public User() {} public User(int userId, String userName, boolean isMale) { this.</description>
    </item>
    
    <item>
      <title>EventBus源码分析之AbstractProcessor</title>
      <link>https://nightjerry.github.io/posts/2019-12-13-abstractprocessor/</link>
      <pubDate>Fri, 13 Dec 2019 10:20:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-12-13-abstractprocessor/</guid>
      <description>EventBus源码分析之AbstractProcessor [TOC]
AbstractProcessor 注解处理器 目前很多Android库都是使用注解的方式实现的.处理注解分两种，
 运行时(Runtime)通过反射机制运行处理的注解， 编译时(Compile time)通过注解处理器处理的注解  AbstractProcessor简介 注解处理器是javac中的，在编译时扫描和处理注解的工具 可以生成java代码，组成.java文件 抽象处理器AbstractProcessor,每个注解处理器都要继承它
import java.util.Set; import javax.annotation.processing.AbstractProcessor; import javax.annotation.processing.ProcessingEnvironment; import javax.annotation.processing.RoundEnvironment; import javax.lang.model.SourceVersion; import javax.lang.model.element.TypeElement; public class MyProcessor extends AbstractProcessor { /** * 特殊的init()方法，它会被注解处理工具调用，并输入ProcessingEnviroment参数。 * @param processingEnvironment 提供很多有用的工具类Elements,Types和Filer */ @Override public synchronized void init(ProcessingEnvironment processingEnvironment) { super.init(processingEnvironment); } /** * 相当于每个处理器的主函数main()。 * 在这里写你的扫描、评估和处理注解的代码，以及生成Java文件 * @param set * @param roundEnvironment 可以查询出包含特定注解的被注解元素 * @return */ @Override public boolean process(Set&amp;lt;?</description>
    </item>
    
    <item>
      <title>EventBus源码分析</title>
      <link>https://nightjerry.github.io/posts/2019-12-12-eventbus/</link>
      <pubDate>Thu, 12 Dec 2019 15:38:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-12-12-eventbus/</guid>
      <description>EventBus源码分析 [TOC]
通过使用，分析eventbus源码实现
1. EventBus.getDefault().register(this); 1.1 EventBus.getDefault() //使用双重校验锁(DCL)单例模式 static volatile EventBus defaultInstance; public static EventBus getDefault() { EventBus instance = defaultInstance; if (instance == null) { synchronized (EventBus.class) { instance = EventBus.defaultInstance; if (instance == null) { instance = EventBus.defaultInstance = new EventBus(); } } } return instance; } new EventBus() private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder(); private final Map&amp;lt;Class&amp;lt;?</description>
    </item>
    
  </channel>
</rss>
