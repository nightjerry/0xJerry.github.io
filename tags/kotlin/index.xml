<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on Jerry Blog</title>
    <link>https://nightjerry.github.io/tags/kotlin/</link>
    <description>Recent content in kotlin on Jerry Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 22 Apr 2021 09:44:00 +0800</lastBuildDate><atom:link href="https://nightjerry.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jetpack Compose 4 Layout</title>
      <link>https://nightjerry.github.io/posts/16176982519360/</link>
      <pubDate>Thu, 22 Apr 2021 09:44:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/16176982519360/</guid>
      <description>[TOC]
Column 垂直布局 @Composable fun ArtistCard() { Column { Text(&amp;#34;First Line&amp;#34;) Text(&amp;#34;Second Line&amp;#34;) } } Row 水平布局 @Composable fun ArtistCard() { Row(verticalAlignment = Alignment.CenterVertically) { Image( painter = painterResource(id = R.mipmap.ic_launcher_round), contentDescription = null ) Column { Text(&amp;#34;Alfred Sisley&amp;#34;) Text(&amp;#34;3 minutes ago&amp;#34;) } } } Box 使用 Box 可将一个元素放在另一个元素上  Compose 可以有效地处理嵌套布局</description>
    </item>
    
    <item>
      <title>Jetpack Compose 3 Text</title>
      <link>https://nightjerry.github.io/posts/16176905521700/</link>
      <pubDate>Thu, 22 Apr 2021 09:26:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/16176905521700/</guid>
      <description>[TOC]
Compose 提供了基础的 BasicText 和 BasicTextField，分别用于显示文字及处理用户输入的主要函数。如果需要自定义可以重写以上两个函数 Compose 提供了高级的 Text 和 TextField，也是用于显示文字和输入框的可组合函数，是遵循 Material Design 设计的函数，推荐使用；
Text @Composable fun SimpleText() { Text(&amp;#34;hello world!&amp;#34;) } 字符串资源 @Composable fun SimpleResourceText() { Text(stringResource(id = R.string.hello_world)) } 文字颜色 @Composable fun SimpleText() { Text(&amp;#34;Hello World!&amp;#34;, color = Color.Blue) } 字号 @Composable fun SimpleText() { Text(&amp;#34;Hello World!&amp;#34;, color = Color.</description>
    </item>
    
    <item>
      <title>Jetpack Compose 2 State</title>
      <link>https://nightjerry.github.io/posts/16169192653523/</link>
      <pubDate>Wed, 21 Apr 2021 09:26:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/16169192653523/</guid>
      <description>[TOC]
Compose 中的状态 应用中的状态是指可以随时间变化的任何值。 状态的概念是 Compose 的核心
@Composable fun HelloContent() { Column(modifier = Modifier.padding(16.dp)) { Text( text = &amp;#34;Hello!&amp;#34;, modifier = Modifier.padding(bottom = 8.dp), style = MaterialTheme.typography.h5 ) // 相当于 EditText  OutlinedTextField( value = &amp;#34;&amp;#34;, onValueChange = { }, // 相当于 hint 属性  label = { Text(&amp;#34;Name&amp;#34;) } ) } } 程序运行后，点击 OutlinedTextField 会弹出输入法，但输入内容不会显示到输入框中，TextField 不会自行更新，但会在其 value 参数更改时更新。这是因 Compose 中组合和重组的工作原理造成的。 onValueChange 函数没有实现更新操作 在函数外定义 text 变量，在以前开发中是可以这样操作的，代码如下；</description>
    </item>
    
    <item>
      <title>Jetpack Compose 1</title>
      <link>https://nightjerry.github.io/posts/jetpack-compose-1/</link>
      <pubDate>Tue, 20 Apr 2021 21:49:00 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/jetpack-compose-1/</guid>
      <description>[TOC]
Jetpack Compose 是用于构建原生界面的新款 Android 工具包。它可简化并加快 Android 上的界面开发。使用更少的代码、强大的工具和直观的 Kotlin API，快速让应用生动而精彩
需要 android studio canary 版本, 下载最新版本 android studio
创建 Compose 项目 创建 Demo File &amp;gt; New &amp;gt; New Project &amp;gt; Empty Compose Activity
app/build.gradle 内容如下
android { ... kotlinOptions { jvmTarget = &amp;#39;1.8&amp;#39; useIR = true } buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion &amp;#34;${compose_version}&amp;#34; } } dependencies { .</description>
    </item>
    
    <item>
      <title>算法之排序(kotlin实现)</title>
      <link>https://nightjerry.github.io/posts/2019-11-21-algorithms-1kotlin/</link>
      <pubDate>Thu, 21 Nov 2019 17:15:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-21-algorithms-1kotlin/</guid>
      <description>fun main(){ // val a = intArrayOf(20,5,10,3,7,98,2,9,54,1,23,6,65)  val a = intArrayOf(20,5,10,3,7,98,2,9) // selection(a) // insertion(a) // shell(a) // mergeSort(a,0, a.size-1)  quick(a, 0,a.size-1) a.forEach{ print(&amp;#34;$it,&amp;#34;) } } /** * 快速排序 */ fun quick(a:IntArray, start: Int, end: Int) { if (end &amp;lt;= start) return val partition = partition(a, start, end) quick(a, start, partition-1) quick(a, partition+1, end) } fun partition(a:IntArray, start: Int,end: Int): Int { var i = start //左右扫描指针  var j = end+1 val value = a[start] while (true){ while (a[++i] &amp;lt; value) if (i == end) break while (value &amp;lt; a[--j]) if (j == start) break if (i &amp;gt;= j) break swap(a, i, j) } swap(a, start, j) //将value放到索引j位置  return j //得到 a[start.</description>
    </item>
    
    <item>
      <title>kotlin basic 5 lambda</title>
      <link>https://nightjerry.github.io/posts/2019-11-15-kotlin4/</link>
      <pubDate>Fri, 15 Nov 2019 09:57:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-15-kotlin4/</guid>
      <description>lambda语法 始终在花括号内，箭头将实参列表与函数体隔开
{x: Int, y: Int -&amp;gt; x+y} val people = listOf(Person(&amp;#34;Bob&amp;#34;,29), Person(&amp;#34;Alice&amp;#34;,20)) println(people.maxBy{ it.age}) //Person(name=Bob, age=29) //`it`是自动生成的参数名称  people.maxBy(){ p:Person -&amp;gt; p.age}//显式写出参数类型 people.maxBy {p: Person -&amp;gt; p.age}//当lambda是唯一参数时，可去掉括号 people.maxBy {p -&amp;gt; p.age} //推导出参数类型  最好显示声明每个lambda的参数
 成员引用:: 创建一个调用单个方法或访问单个属性的函数值, 双冒号将类名称与要引用的成员名隔开,不要在成员引用的名称后加括号 还可以引用顶层函数
fun salute() = println(&amp;#34;hello&amp;#34;) run(::salute) 集合的函数式API filter和map filter函数可以从集合中移除不想要的元素，但不会改变这些元素；起过滤作用 map函数对集合中的每个元素应用给定的函数并把结果收集到新集合
val list = listOf(1,2,3,4) println(list.</description>
    </item>
    
    <item>
      <title>kotlin6 类型</title>
      <link>https://nightjerry.github.io/posts/2019-11-15-kotlin6/</link>
      <pubDate>Fri, 15 Nov 2019 09:57:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-15-kotlin6/</guid>
      <description>可空性 显示在类型名称后面加问号来表示类型可为null
String? = String or null 没有问号?的类型表示该类型的变量不能为空；这说明常见类型默认都是非空的； 一个可空类型的值，对它的操作也会受到限制
fun strLen(s: String?) = s.length() ERROR: only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type kotlin.String? 不能将可空类型赋值给非可空类型的变量
安全调用运算符: ?. 允许把一次null检查和一次方法调用合并成一个操作
s?.toUpperCase() 等同于 if (s != null) s.toUpperCase() else null 安全调用的结果类型也是可空的
fun printAll(s: String?) { val a:String?</description>
    </item>
    
    <item>
      <title>kotlin8 高阶函数</title>
      <link>https://nightjerry.github.io/posts/2019-11-15-kotlin8/</link>
      <pubDate>Fri, 15 Nov 2019 09:57:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-15-kotlin8/</guid>
      <description>声明高阶函数 高阶函数就是以另一个函数作为参数或者返回值的函数
函数类型 lambda表达式就是函数类型
val sum = {x: Int, y: Int -&amp;gt; x+y} val action = {println(42)} val b = 3 val a: Int = 4 编译器推导出sum,action变量具有函数类型;与变量声明方式类似，sum省略了变量类型，显示类型声明方式如下
val sum: (Int, Int) -&amp;gt; Int = {x,y -&amp;gt; x+y} val action:()-&amp;gt;Unit = { println(42) } 声明函数类型，需要将函数参数类型放在括号中，紧接着是一个箭头和函数的 返回类型
/*函数参数类型*/(Int, String) -&amp;gt; Unit/*返回类型*/  函数类型的声明必须有显式的返回类型， Unit类型也不能省略</description>
    </item>
    
    <item>
      <title>kotlin3 类,对象和接口</title>
      <link>https://nightjerry.github.io/posts/2019-11-14-kotlin3/</link>
      <pubDate>Fri, 15 Nov 2019 09:53:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-14-kotlin3/</guid>
      <description>1. 类 Kotlin的声明默认时public final的 嵌套的类默认不是内部类，没有包含其对外部类的隐式引用. 使用interface定义接口
接口实现 kotlin使用冒号:关键字代替java中的extends和implements关键字. 与java一样，类只能单继承，可以实现多个接口 kotlin中的override 是强制要求的 接口中的函数可以有默认的方法体,有默认实现的函数可以不重写
interface Clickable { fun click() fun showOff() = println(&amp;#34;I&amp;#39;m clickable!&amp;#34;) } 如果实现多个接口，接口有相同的函数名，则类需要显示实现该方法，否则编译错误：
The class &#39;Button&#39; must override public open fun showOff() because it inherits many implementation of it. interface Focusable { fun showOff() = println(&amp;#34;I&amp;#39;m focusable!&amp;#34;) } class Button: Clickable, Focusable { override fun click() = println(&amp;#34;I was clicked&amp;#34;) //显示实现，通过super&amp;lt;父类&amp;gt;调用父类方法  override fun showOff() { super&amp;lt;Clickable&amp;gt;.</description>
    </item>
    
    <item>
      <title>kotlin2 fun</title>
      <link>https://nightjerry.github.io/posts/2019-11-14-kotlin2/</link>
      <pubDate>Thu, 14 Nov 2019 16:58:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-14-kotlin2/</guid>
      <description>函数的定义与调用 命名参数 val list= listOf(1,2,3) println(list) // [1,2,3] 更改集合的显示样式
fun &amp;lt;T&amp;gt; joinToString(collection: Collection&amp;lt;T&amp;gt;, separator: String, prefix: String, postfix: String): String{ val result = StringBuilder(prefix) for ((index, element) in collection.withIndex()) { if(index &amp;gt;0) result.append(separator) result.append(element) } result.append(postfix) return result.toString() } println(joinToString(list,&amp;#34;;&amp;#34;,&amp;#34;(&amp;#34;,&amp;#34;)&amp;#34;)) //(1;2;3) 命名参数就是在调用函数时给参数指定名字，提高可读性；
joinToString(list,separator=&amp;#34;;&amp;#34;, prefix=&amp;#34;(&amp;#34;, postfix=&amp;#34;)&amp;#34;)  如果调用函数时，指明了一个参数的名称，为避免混淆，它之后的所有参数都需要标明名称；(否则编译失败) 如使用命名参数，可以不按照参数列表顺序使用；
 默认参数值 函数的参数带有默认值，替代java中的函数重载</description>
    </item>
    
    <item>
      <title>kotlin1 函数&amp;变量</title>
      <link>https://nightjerry.github.io/posts/2019-11-14-kotlin1/</link>
      <pubDate>Thu, 14 Nov 2019 16:48:02 +0800</pubDate>
      
      <guid>https://nightjerry.github.io/posts/2019-11-14-kotlin1/</guid>
      <description>1. 函数和变量 1.1 函数 fun main(args: Array&amp;lt;String&amp;gt;){ println(&amp;#34;Hello world!&amp;#34;) } 函数以关键字fun开始声明，函数名称紧随其后，参数列表用小括号括起来，返回值类型位于参数列表后，之间用:分隔；
 语句和表达式: kotlin中表达式有值，可以使用变量引用，而语句没有值；java中所有的控制结构都是语句； kotlin中除了循环(for,while,do/while)以外大多数控制结构都是表达式；
 表达式函数体
fun max(a:Int, b:Int):Int = if (a&amp;gt; b) a else b 只有表达式体函数的返回类型可以省略，有返回值的代码块体函数，必须显示写出返回值类型和return
1.2 变量 kotlin变量类型可以省略，如果没有初始化，需要显示指定类型；
val answer = 42 //省略变量类型 val answer:Int //指定类型 answer = 42 变量声明语法： val/var 变量名: 变量类型 = x
可变变量和不可变量
 val(value简写): 不可变引用；相当于java的final var(variable简写): 可变引用，可以多次修改；  默认情况下，使用val关键字声明变量； val引用自身是不可变的，但指向的对象可能是可变的； 例：</description>
    </item>
    
  </channel>
</rss>
